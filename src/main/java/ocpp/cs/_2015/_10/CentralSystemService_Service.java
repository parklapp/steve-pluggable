package ocpp.cs._2015._10;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import jakarta.xml.ws.WebEndpoint;
import jakarta.xml.ws.WebServiceClient;
import jakarta.xml.ws.WebServiceFeature;
import jakarta.xml.ws.Service;

/**
 * The Central System Service for the Open Charge Point Protocol
 *
 * This class was generated by Apache CXF 3.2.4
 * 2023-02-25T02:57:51.617Z
 * Generated source version: 3.2.4
 *
 */
@WebServiceClient(name = "CentralSystemService",
                  wsdlLocation = "file:/home/jitpack/build/src/main/resources/wsdl/OCPP_CentralSystemService_1.6.wsdl",
                  targetNamespace = "urn://Ocpp/Cs/2015/10/")
public class CentralSystemService_Service extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("urn://Ocpp/Cs/2015/10/", "CentralSystemService");
    public final static QName CentralSystemServiceSoap12 = new QName("urn://Ocpp/Cs/2015/10/", "CentralSystemServiceSoap12");
    static {
        URL url = null;
        try {
            url = new URL("file:/home/jitpack/build/src/main/resources/wsdl/OCPP_CentralSystemService_1.6.wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(CentralSystemService_Service.class.getName())
                .log(java.util.logging.Level.INFO,
                     "Can not initialize the default wsdl from {0}", "file:/home/jitpack/build/src/main/resources/wsdl/OCPP_CentralSystemService_1.6.wsdl");
        }
        WSDL_LOCATION = url;
    }

    public CentralSystemService_Service(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public CentralSystemService_Service(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public CentralSystemService_Service() {
        super(WSDL_LOCATION, SERVICE);
    }

    public CentralSystemService_Service(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public CentralSystemService_Service(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public CentralSystemService_Service(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }




    /**
     *
     * @return
     *     returns CentralSystemService
     */
    @WebEndpoint(name = "CentralSystemServiceSoap12")
    public CentralSystemService getCentralSystemServiceSoap12() {
        return super.getPort(CentralSystemServiceSoap12, CentralSystemService.class);
    }

    /**
     *
     * @param features
     *     A list of {@link jakarta.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns CentralSystemService
     */
    @WebEndpoint(name = "CentralSystemServiceSoap12")
    public CentralSystemService getCentralSystemServiceSoap12(WebServiceFeature... features) {
        return super.getPort(CentralSystemServiceSoap12, CentralSystemService.class, features);
    }

}
